#!perl

# check_writable is a Nagios plugin that checks if one or more
# directories are writable by:
#
# - checking that the supplied directory is indeed a directory
# - checking if the the filesystem permissions are OK
# - creating a temporary file
# - writing random data to the temporary file (and reading it back)
#
# It return a critical status if one of the tests fails
#
# See  the INSTALL file for installation instructions
#
# Copyright (c) 2007, ETH Zurich.
#
# This module is free software; you can redistribute it and/or modify it
# under the terms of GNU general public license (gpl) version 3.
# See the LICENSE file for details.
#
# RCS information
# enable substitution with:
#   $ svn propset svn:keywords "Id Revision HeadURL Source Date"
#
#   $Id$
#   $Revision$
#   $HeadURL$
#   $Date$

use 5.008;
use strict;
use warnings;
use Carp;

use version; our $VERSION = '2.0.1';

use Data::Random;
use English qw(-no_match_vars);
use File::Temp;
use Getopt::Long;
use Nagios::Plugin::Threshold;
use Nagios::Plugin;
use Pod::Usage qw(pod2usage);

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#
use vars qw(
  $plugin
  $result
  $verbose
  @dir
  @errors
);

##############################################################################
# main
#

################
# Initialization
$plugin = Nagios::Plugin->new( shortname => 'CHECK_WRITABLE' );

########################
# Command line arguments

Getopt::Long::Configure(qw{bundling});
$result = GetOptions(
    'dir|d=s'    => \@dir,
    'help|?'     => sub { pod2usage(); },
    'verbose|v+' => \$verbose,
    'version'    => sub { print "check_writeable version $VERSION\n"; exit 3; }
);

if ( !$result ) {
    pod2usage();
}

if ( !@dir ) {
    pod2usage( -message => 'at least one directory has to be specified' );
}

File::Temp->safe_level(File::Temp::HIGH);

foreach my $dir (@dir) {

    if ($verbose) {
        print "Checking $dir\n";
    }

    # 1) check FS permissions

    if ( !-d $dir ) {
        push @errors, "'$dir' is not a directory";
        next;
    }
    elsif ( !-w $dir || !-W $dir ) {
        push @errors, "'$dir' is not writable";
        next;
    }

    # 2) try to create a temporary file

    my $tmp = new File::Temp(
        TEMPLATE => 'writetest-XXXXX',
        DIR      => $dir,
        CLEANUP  => 1
    );

    if ($verbose) {
        print "Creating $tmp\n";
    }

    # 3) try to write to the file

    my $random_chars =
      join q{}, Data::Random::rand_chars( set => 'all', size => 32 ) ;

    print { $tmp } $random_chars;

    close $tmp or
        $plugin->nagios_exit(UNKNOWN, "Cannot close $tmp: $OS_ERROR");

    # 4) read the content back and check it

    my $IN;
    if ( ! open $IN, q{<}, $tmp->filename ) {
        push @errors, "Cannot read temporary file in $dir";
        next;
    }

    while (<$IN>) {
        if ( $_ ne $random_chars ) {
            push @errors, "R/W error on temporary file in $dir";
        }
        last;
    }

    close $IN or
        $plugin->nagios_exit(UNKNOWN, "Cannot close $tmp: $OS_ERROR");

}

if (@errors) {
    $plugin->nagios_exit( CRITICAL, join q{ }, @errors );
}

$plugin->nagios_exit( OK, join q{ }, @dir );

1;
