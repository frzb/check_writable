#!/usr/bin/perl

# ETH Zurich / Informatikdienste
# Matteo Corti <matteo.corti@gmail.com>

use strict;
use warnings;

use File::Temp;
use Getopt::Long;
use Data::Random;
    
my $VERSION    = '1.0.0';

my $prog_name  = "WRITEABLE";

##############################################################################
# subroutines

################################
# prints the usage of the plugin
sub usage {
  my $msg = shift;

  if (defined $msg) {
      print "$msg\n";
  }

  print "
usage: check_writeable --dir DIRECTORY

  -?, --help      help
  -d, --dir       directory to check
  -v, --verbose   verbose output
  --version       prints $prog_name version and exits

";
  
  exit(3);
}

##############################################################################
# main
#

my $result;
my @dir;
my $verbose;


my @errors;

########################
# Command line arguments

Getopt::Long::Configure ("bundling");
$result = GetOptions (
    "dir|d=s"       => \@dir,
    "help|?"        => sub { usage() },
    "verbose|v+"    => \$verbose,
    "version"       => sub { print "check_writeable version $VERSION\n"; exit 3;}
);

if (!$result) {
  usage();
}

if (! @dir) {
    die "at least one directory has to be specified";
}

File::Temp->safe_level( File::Temp::HIGH );

foreach my $dir (@dir) {

    if ($verbose) {
        print "Checking $dir\n";
    }

    # 1) check FS permissions
    
    if (!-d $dir) {
        push @errors, "'$dir' is not a directory";
        next;
    } elsif (!-w $dir || !-W $dir) {
        push @errors, "'$dir' is not writable";
        next;
    }

    # 2) try to create a temporary file
    
    my $tmp = new File::Temp(
        TEMPLATE => 'writetest-XXXXX',
        DIR      => $dir,
        CLEANUP => 1            
    );
    
    if ($verbose) {
        print "Creating $tmp\n";
    }

    # 3) try to write to the file

    my $random_chars = join('',Data::Random::rand_chars( set => 'all', size => 32 ));
    
    print $tmp $random_chars;

    close $tmp;
    
    # 4) read the content back and check it

    if (!open(IN, $tmp->filename)) {
        push @errors, "Cannot read temporary file in $dir";
        next;
    }

    while(<IN>) {
        if ($_ ne $random_chars) {
            push @errors, "R/W error on temporary file in $dir";
        }
        last;
    }

    close IN;
    
}

if (@errors) {
    print "$prog_name CRITICAL - ".join(" ",@errors)."\n";
    exit(2);
}

print "$prog_name OK - ".join(" ", @dir),"\n";

exit(0);

1;

__END__
